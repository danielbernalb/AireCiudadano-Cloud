apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:1.20.2-alpine
          {{- if eq .Values.tls true }}
          command: ["sh"]
          args: ["-c","/scripts/run.sh"]
          {{- end }}
          volumeMounts:
            - name: confd
              mountPath: /etc/nginx/conf.d/
            - name: letsencrypt-volume
              mountPath: /etc/letsencrypt
            {{- if eq .Values.tls true }}
            - name: nginx-run
              mountPath: /scripts
            - name: nginx-ssl
              mountPath: /scripts2
            {{- end }}
          resources:
            {{- toYaml .Values.resources.nginx | nindent 12 }}
            requests:
          ports:
          - containerPort: 80
            hostPort: 80
            protocol: TCP
          - containerPort: 443
            hostPort: 443
            protocol: TCP
      initContainers:
        - name: copyfile
          image: nginx:1.20.2-alpine
          volumeMounts:
            - name: confd
              mountPath: /confd
            - name: nginx-configmap
              mountPath: /configmap
          command:
          - cp
          - /configmap/default.conf
          - /confd/default.conf
      volumes:
        - name: letsencrypt-volume
          hostPath:
            path: /data/letsencrypt
        {{- if eq .Values.tls true }}
        - name: nginx-run
          configMap:
            name: nginx-run
            defaultMode: 0777
        - name: nginx-ssl
          configMap:
            name: nginx-ssl
        {{- end }}
        - name: nginx-configmap
          configMap:
            name: nginx-configmap
        - name: confd
          emptyDir: {}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-run
data:
  run.sh: |
    apk add certbot certbot-nginx
    echo "5 0 * * 6 certbot renew >/dev/null 2>&1" >> /etc/crontabs/root
    crond
    nginx -g 'daemon off;'
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-ssl
data:
  options-ssl-nginx.conf: |
    ssl_session_cache shared:le_nginx_SSL:10m;
    ssl_session_timeout 1440m;
    ssl_session_tickets off;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configmap
data:
  default.conf: |
    upstream grafana {
      server        {{ .Values.publicIP }}:30300;
    }

    server {
        {{- if eq .Values.tls true }}
        listen [::]:443 ssl ipv6only=on; # managed by Certbot
        listen 443 ssl; # managed by Certbot
        ssl_certificate /etc/letsencrypt/live/{{ .Values.publicIP }}/fullchain.pem; # managed by Certbot
        ssl_certificate_key /etc/letsencrypt/live/{{ .Values.publicIP }}/privkey.pem; # managed by Certbot
        /scripts2/options-ssl-nginx.conf > /etc/letsencrypt/options-ssl-nginx.conf
        include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
        {{- else }}
        listen       80;
        listen  [::]:80;
        {{- end }}

        server_name  {{ .Values.secondaryPublicIP }} {{ .Values.publicIP }};

        location / {
            proxy_pass http://grafana;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            #root   /usr/share/nginx/html;
            #index  index.html index.htm;
        }

        location ~ ^/(panel|live|kiosk)  {
            rewrite ^(.*)$ https://$host?kiosk break;
        }

        location ~ ^/(sensor|device|dispositivo|medidor|view|unidad|unit) {
            rewrite /(.*)/(.*)/(.*) https://$host/d/lastvalue?var-uid=$2&var-name=$3&kiosk  break;
            rewrite /(.*)/(.*) https://$host/d/lastvalue?var-uid=$2&kiosk  break;
        }

        location ~ ^/(admin|detalle|detail|edit|editor) {
            rewrite /(.*)/(.*)/(.*) https://$host/d/lastvalue?var-uid=$2&var-name=$3  break;
            rewrite /(.*)/(.*) https://$host/d/lastvalue?var-uid=$2  break;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
    {{- if eq .Values.tls true }}
    server {
        if ($host = {{ .Values.publicIP }}) {
            return 301 https://$host$request_uri;
        } # managed by Certbot

        {{- if .Values.secondaryPublicIP }}
        if ($host = {{ .Values.secondaryPublicIP }}) {
            return 301 https://$host$request_uri;
        } # managed by Certbot
        {{- end }}

        listen [::]:80;
        listen 80;

        server_name  {{ .Values.secondaryPublicIP }} {{ .Values.publicIP }};
        return 404; # managed by Certbot
    }
    {{- end }}
