apiVersion: apps/v1
kind: Deployment
metadata:
  name: mqttforward
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mqttforward
  template:
    metadata:
      labels:
        app: mqttforward
    spec:
      containers:
        - name: mqttforward
          image: python
          command: ["/bin/bash"]
          args: ["-c","/config/run.sh"]
          volumeMounts:
            - name: mqttforward
              mountPath: /config/
          resources:
            {{- toYaml .Values.resources.mqttforward | nindent 12 }}
      volumes:
        - name: mqttforward
          configMap:
            name: mqttforward
            defaultMode: 0777
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: mqttforward
data:
  run.sh: |
    #!/bin/bash
    pip install paho-mqtt
    pip install requests
    pip install pyyaml
    while ((1))
    do 
      python /config/pushgateway_forwarder.py pushgateway-np mqtt-np
      echo "ERROR: Script failed"
    done
    
  pushgateway_forwarder.py: |
    #!/usr/bin/env python
    import sys
    import requests
    from paho.mqtt import client as mqtt
    import yaml

    broker = 'sensor.aireciudadano.com'
    port = 1883

    HEADERS = {'X-Requested-With': 'Python requests', 'Content-type': 'text/xml'}


    def pushdata(DATA, URL):
      try:
        #print(DATA)
        response = requests.post(url=URL, data=DATA,headers=HEADERS)
        print(response.content)
      except requests.exceptions.RequestException as e:  # This is the correct syntax
        raise SystemExit(e)

    def on_connect(client, userdata, flags, rc):
        # connect mqtt broker
        client.subscribe([("measurement", 0)])
        
    def on_connect2(client, userdata, flags, rc):
 
      if rc == 0:
         print("Connected to broker")
 
      else:
         print("Connection failed")

    def on_message(client, userdata, msg):
        payload = msg.payload.decode("utf-8")
        payload = yaml.safe_load(msg.payload.decode("utf-8"))

        device_id = payload.pop('id', None)
        if device_id:
            msg = 'PM25test ' + str(payload.pop('PM25', 0)) + '\n' + \
                  'CO2 ' + str(payload.pop('CO2', 0)) + '\n' + \
                  'VOC ' + str(payload.pop('VOC', 0)) + '\n' + \
                  'NOx ' + str(payload.pop('NOx', 0)) + '\n' + \
                  'Humidity ' + str(payload.pop('humidity', 0)) + '\n' + \
                  'Temperature ' + str(payload.pop('temperature', 0)) + '\n' + \
                  'Noise ' + str(payload.pop('noisedba', 0)) + '\n' + \
                  'RSSI ' + str(payload.pop('RSSI', 0)) + '\n' + \
                  'Latitude ' + str(payload.pop('latitude', 0)) + '\n' + \
                  'Longitude ' + str(payload.pop('longitude', 0)) + '\n' + \
                  'InOut ' + str(payload.pop('inout', 0)) + '\n' + \
                  'ConfigVal ' + str(payload.pop('configval', 0)) + '\n' + \
                  'PM25raw ' + str(payload.pop('PM25raw', 0)) + '\n' + \
                  'NoisePeak ' + str(payload.pop('noisepeak', 0)) + '\n' + \
                  'PM252 ' + str(payload.pop('PM252', 0)) + '\n' + \
                  'PM10 ' + str(payload.pop('PM10', 0)) + '\n' + \
                  'MAC ' + str(payload.pop('mac', 0)) + '\n' + \
                  'Var1 ' + str(payload.pop('datavar1', 0)) + '\n' + \
                  'Var2 ' + str(payload.pop('datavar2', 0)) + '\n'

            URL  = 'http://' + sys.argv[1] + ':9091/metrics/job/' + str(device_id)
            pushdata(msg, URL)

        else:
            print( 'ERROR: Malformed message' + str(payload))

    def on_message2(client, userdata, msg):
        payload = msg.payload.decode("utf-8")
        payload = yaml.safe_load(msg.payload.decode("utf-8"))

        device_id = payload.pop('id', None)
        if device_id:
            msg = '\"PM25test22\": ' + str(payload.pop('PM25', 0)) +
                  '\"CO2\": ' + str(payload.pop('CO2', 0)) +
                  '\"VOC\": ' + str(payload.pop('VOC', 0)) +
                  '\"NOx\": ' + str(payload.pop('NOx', 0)) +
                  '\"Humidity\": ' + str(payload.pop('humidity', 0)) +
                  '\"Temperature\": ' + str(payload.pop('temperature', 0)) +
                  '\"Noise\": ' + str(payload.pop('noisedba', 0)) +
                  '\"RSSI\": ' + str(payload.pop('RSSI', 0)) +
                  '\"Latitude\": ' + str(payload.pop('latitude', 0)) +
                  '\"Longitude\": ' + str(payload.pop('longitude', 0)) +
                  '\"InOut\": ' + str(payload.pop('inout', 0)) +
                  '\"ConfigVal\": ' + str(payload.pop('configval', 0)) +
                  '\"PM25raw\": ' + str(payload.pop('PM25raw', 0)) +
                  '\"NoisePeak\": ' + str(payload.pop('noisepeak', 0)) +
                  '\"PM252\": ' + str(payload.pop('PM252', 0)) +
                  '\"PM10\": ' + str(payload.pop('PM10', 0)) +
                  '\"MAC\": ' + str(payload.pop('mac', 0)) +
                  '\"Var1\": ' + str(payload.pop('datavar1', 0)) +
                  '\"Var2\": ' + str(payload.pop('datavar2', 0))

            result = client.publish("measurementfixed", msg)
            # result: [0, 1]
            status = result[0]
            if status == 0:
              print(f"Send `{msg}` to topic `{"measurementfixed"}`")
            else:
              print(f"Failed to send message to topic {"measurementfixed"}")
                 
        else:
            print( 'ERROR: Malformed message' + str(payload))

    def main():
      if (len(sys.argv) != 3):
          print('Usage: '+sys.argv[0]+' <pushgateway IP> <mqttbroker IP>. Found '+len(sys.argv)+' arguments.')
          exit()
      
      client = mqtt.Client()
      client.connect(sys.argv[2], 1883)
      client.on_connect = on_connect
      client.on_message = on_message
      client = mqtt.Client()               #create new instance
      client.on_connect= on_connect2                      #attach function to callback
      client.connect(broker, port=port)          #connect to broke
      client.on_message = on_message2
      client.loop_forever()

    if __name__ == "__main__":
        main()



